<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
	<channel>
		<description><![CDATA[Ocean's Blog]]></description>
		<title><![CDATA[Ocean's Blog]]></title>
		<link>http://blog.nwy.me/</link>
		<pubDate>2013-08-05T11:56:59+08:00</pubDate>
 
		
		<item>
			<description>
				<![CDATA[
				<p>冯仑在《开讲了》上说，梦想是什么，梦想就是人生的gps，它能够为人生指明一个方向，人最恐惧的不是没有钱，不是失败，而是没有方向。一旦迷失了方向，人就会焦虑，然后随时时间的流逝变成了绝望。我一直在焦虑、晚睡，晚睡内心中没有勇气结束这一天，因为又虚度一天，第二天睡起来镜子里看到是一无所成自己。</p>

<p>人最大的惰性在于学会“习惯”，当习惯了上班睡觉再上班再睡觉的重复生活后，似乎一切都是那么地理所当然，可内心深处总是会有一丝不安，生活似乎不应该如此，如果你半夜醒来发现自己已经好长时间没读书，而且没有任何负罪感的时候，你就必须知道，你已经堕落了。不是说书本本身特了不起，而是读书这个行为意味着你没有完全认同于这个现世和现实，你还有追求，还在奋斗，你还有不满，你还在寻找另一种可能性，另一种生活方式。</p>

<p>当我们步入中年，有了孩子，父母老去，第一次真正承担家庭的责任时，我们就很容易陷入迷惘，不知道何去何从。这时的我们，就像是生活在漆黑的隧道里，而梦想就是隧道远处的一线光亮，会给我们无限的勇气，同时也会让我们立刻开始行动，放下许多的累赘往前走。</p>

<p>梦想，从来不是现实，而是对现实的不满，追逐梦想实际上是解决自己对现实不满的过程。</p>

<p>2013年已经过去了215天，剩下的150天内计划读完三十一本书，IT专业技术书籍不适合速读，涉及另一个职业规划，单独再整理一个书单。</p>

<p>快速阅读</p>

<p>杠杆阅读术</p>

<p>别告诉我你会记笔记</p>

<p>开放社会及其敌人</p>

<p>男人来自火星，女人来自金星</p>

<p>如何阅读一本书</p>

<p>少有人走的路</p>

<p>少有人走的路Ⅱ</p>

<p>少有人走的路III</p>

<p>数学之美</p>

<p>从一到无穷大.one,two,three.infinity</p>

<p>吾国与吾民</p>

<p>别闹了，费曼先生</p>

<p>浪潮之巅</p>

<p>拖延心理学</p>

<p>黑客与画家</p>

<p>代码之美</p>

<p>中国近代史</p>

<p>把时间当朋友</p>

<p>学会提问-批判性指南</p>

<p>学习之道</p>

<p>专业主义-大前研一</p>

<p>逻辑思维-夹缝中的80后</p>

<p>心理学与生活</p>

<p>冥想5分钟，等于熟睡一小时</p>

<p>自控力</p>

<p>意志力</p>

<p>此生为何而来</p>

<p>不要等到毕业以后</p>

<p>害羞心理学</p>

<p>大数据</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[2013年下半年读书计划]]></title>
			<link>http://blog.nwy.me/blog/2013/08/04/2013nian-xia-ban-nian-du-shu-ji-hua/</link>
			<pubDate>2013-08-04T15:23:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2013/08/04/2013nian-xia-ban-nian-du-shu-ji-hua</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>最近楼里网络故障频繁发生，严重影响各部门的正常工作，作为网管，能快速的解决问题，众望所归，自然压力很大。</p>

<h1>故障症状：</h1>

<p>两个楼层所有办公室都不能上网，ping不通网关，重启后暂时能上网，时间不等，又会出现网内集体无法上网现象。</p>

<h1>网络拓扑结构：</h1>

<p>三四楼的网络接入点在三楼，一条100M光纤线路通过光纤收发器接到一个二层交换机，三楼所有办公室的网络都接在这个交换机上，四楼一个二层交换机，线路级联在三楼的二层交换机上。三楼接入点的网关是机房核心交换机的划分的VLan。</p>

<h1>初步判断：</h1>

<ol>
<li>ARP攻击导致，泛洪攻击。</li>
<li>网络环路产生的广播风暴，导致交换机被堵死。</li>
<li>交换机硬件故障。</li>
</ol>


<h1>解决过程：</h1>

<p>先用ARP软件检测是否有攻击，笔记本单独在交换机上接一个端口开着检测软件，查看网络故障后笔记本本地缓存的网关MAC地址，和VLan网关的MAC地址一致，没有被伪造，没有发现有ARP攻击，排除ARP攻击的可能性。
拔掉设备箱里所有网线，交换机上只接笔记本一台设备，故障仍然存在。把笔记本通过网线直接接到光纤收发器，故障仍然存在。而且发现网络故障的时候光纤收发器的TX和RX指示灯长亮不闪烁，可以判断问题出在光纤收发器上，也排除了交换机硬件故障的可能，剩下了就是联系信息中心，更换光纤收发器后，至此故障解决。</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[一个光纤收发器引发的故障]]></title>
			<link>http://blog.nwy.me/blog/2012/11/05/a-media-converter-fault-caused-by/</link>
			<pubDate>2012-11-05T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2012/11/05/a-media-converter-fault-caused-by</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>RAM Host的VPS由于站长也是Linux技术大牛，做过优化，即使低端配置性能也不错，所以销量一直很好，加上站长不超售的原则，往往一放出就告罄，上周末终于抢到一个。购买的时候因为开着代理，被Ram Host的订单系统检测到当作风险订单处理了，最后发ticket和站长解释了一番天朝的网络环境才订单才得以通过。</p>

<p>这次买的是RAM Host的Premium West Coast Los Angeles Virtual Dedicated Server的Standard VPS，512MB内存，这个机房的VPS都是KVM的，没有部署站长优化过得系统，需要先在VPS管理面板里选择引导安装系统的镜像ISO。</p>

<p><img src="http://nwy.me/img/2012/06/%E9%80%89%E5%8C%BA_002.png" alt="系统选择" /></p>

<p>VNC连接主机后进Console，需要注意的是VPS管理面板里VM Console页面给的连接端口是随机的。</p>

<p><img src="http://nwy.me/img/2012/06/QEMU-oceannan-%E5%9C%A8-2012-06-07-003459-%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="QEMU (oceannan) 在 2012-06-07 00:34:59 的屏幕截图" /></p>

<p>这部分就不一一截图了，一路空格加回车，然后重启。</p>

<p>登录系统后需要先配置ip，修改对应网卡的网关的配置文件，</p>

<p><code>vi /etc/sysconfig/Network </code></p>

<p>设置本机连接的网关的IP地址,在VPS管理面板里有给出，加入一行：</p>

<p><code>GATEWAY=10.0.0.1</code></p>

<p>修改对应网卡的IP地址的配置文件：</p>

<p><code>vi /etc/sysconfig/Network-scripts/ifcfg-eth0</code></p>

<p>修改以下内容:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>eth0 <span class="c">#描述网卡对应的设备别名，例如ifcfg-eth0的文件中它为eth0</span>
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>static <span class="c">#设置网卡获得ip地址的方式，可能的选项为static，dhcp或bootp，分别对应静态指定的 ip地址，通过dhcp协议获得的ip地址，通过bootp协议获得的ip地址</span>
</span><span class='line'><span class="nv">BROADCAST</span><span class="o">=</span>192.168.0.255 <span class="c">#对应的子网广播地址</span>
</span><span class='line'><span class="nv">HWADDR</span><span class="o">=</span>00:03:E8:04:D8:B3 <span class="c">#对应的网卡物理地址</span>
</span><span class='line'><span class="nv">IPADDR</span><span class="o">=</span>192.168.1.2 <span class="c">#如果设置网卡获得 ip地址的方式为静态指定，此字段就指定了网卡对应的ip地址</span>
</span><span class='line'><span class="nv">NETMASK</span><span class="o">=</span>255.255.255.0 <span class="c">#网卡对应的网络掩码</span>
</span><span class='line'><span class="nv">Network</span><span class="o">=</span>192.168.1.0 <span class="c">#网卡对应的网络地址</span>
</span><span class='line'><span class="nv">IPV6INIT</span><span class="o">=</span>no
</span><span class='line'><span class="nv">IPV6_AUTOCONF</span><span class="o">=</span>no
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes <span class="c">#系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备</span>
</span></code></pre></td></tr></table></div></figure>


<p>重启网络，使刚才的设置生效。</p>

<p><code>service Network restart</code></p>

<p>至此Centos6.2就安装完成了。</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[RAM Host的KVM VPS安装CentOS6.2]]></title>
			<link>http://blog.nwy.me/blog/2012/06/07/ram-host-kvm-the-vps-installation-centos6-2/</link>
			<pubDate>2012-06-07T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2012/06/07/ram-host-kvm-the-vps-installation-centos6-2</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>　　最近三个月，看世间百态，人情冷暖，失落与收获都颇多。失落在我出生是纯正的上海郊区农村屌丝，无权无势，白手起家，本以为自己是一个很励志的“屌丝的逆袭”的故事，却硬要被说成一个经过多方神秘势力包装的惊天大阴谋，失落在北京有一个几面之交的“名流友人”，莫名编造了一个内幕，四处传播，让我心寒，我愿怀着善意，相信他是无心的吹水；失落在我自己，太过在意，害怕深文周纳，行文变得谨慎。收获在很多谋面和未曾谋面的朋友仗义执言：虽然都被打成利益集团；收获在十几年前的同学为我说话，虽然因为回忆太远往事，细节互相有偏差被打成诈骗团伙；收获在我看到太多人心和各种面目，以后写小说刻画人物会更加精彩。</p>

<p>　　人的处事风格和性格不是一成不变的，尤其是16岁到30岁之间。我写过一些不错的文字，也写了不少烂文章，无论状态起伏，无论风格转变，都是一个人的成长历程，谁人能在十四年的青春里保持纹丝不动。我二十岁出头的时候主张抵制日货，是个民族主义者，08年的时候开始反对抵制家乐福，我小时候主张打仗收复台湾，现在都不好意思承认自己这么说过，十七八岁时，我居然说，活着的作家中，写文章论排名老子天下第二，现在想起来都脸红，更让我脸红的是当年我心中那个第一居然是李敖。我少年时装酷，追求语出惊人，这些话现在看来，很多都惹人厌恶，甚至还惹我自己厌恶，把各种傻话挖出来，总会击中不同的人。谁没有年少过，你在宿舍里说过的那些蠢话，你在树林里幼稚的表白，现在翻出来可不都得笑死，没有人永远和过去的自己一致，除非你不再成长。</p>

<p>　　接触过我的人都知道，我面对生人其实腼腆拘谨。这点从小到现在都未改变。也许我把性格里的另一面都发泄到了赛车和写作中。只要不是被踢走，我在一支车队一效力就是五六年，有合作的地方只要没有意外都会一直合作下去，酒店都选熟悉的住，吃饭永远去那两三家，点的也永远是那几个菜。我性格就是这样。也许因为我选择走的道路太不一样，充满未知，所以我很希望在日常生活里没有变故，不再有陌生的事物。我口才不算好，有人把我十几二十岁时的电视采访都挖了出来，挑了回答的差的问题和木讷的地方拼接在一起，以验证我是一个草包。</p>

<p>　　是的，大家尽可以挖苦我，嘲弄我，也许有的人在二十来岁的时候上电视能出口成章泰然自若，比我强很多。今天我知道了口无遮拦的代价，知道了年少轻狂的代价，知道了直来直去的代价，知道了不设城府的代价，但明天我还会这样说话，外交辞令永远不会出现在我的嘴里。我在很多地方笨拙，嘴皮子也耍不好，所以我选择了写东西。面对键盘，我拥有我自己的世界，就像我倒车经常撞，停车老停歪，但戴上头盔，坐进赛车，我依然是个好的车手。这就是我的性格。人的性格未必一面，也未必必须符合其他人的设定。每个人的境遇和脾性都是不同的。你不能拿着标尺先裁量自己，再去宣判每个与你尺码不同的他人是伪劣产品。</p>

<p>　　我反智么？是的，我反弱智，我还反各种束缚人的体制。我学历低，学识差，也有很多的缺点。我有恶趣味，但我最怕无趣，我口无遮拦，但我最恨道貌岸然。我常说错话，得罪人，也常道歉反思。此番我又发现我17岁的书中有一句话错了，那就是七门红灯，照亮我的前程一一红灯永远不能照亮你的前程，照亮你前程的，是你的才能。在很多的采访里，我常说一句话：人，可以不上学，但一定不能停止学习。我也常说，为了避免早期作品中模仿他人的痕迹太重这个缺点，我不再看其他人的小说，但一定不能停止阅读，只有阅读，才会进步。硬要控制信息，断章取义，我也没有办法，也许我们读着不一样的书，走着不一样的路。我只是选择了做自己喜欢的事情，为了写作，我影响了学业，最后退学，为了赛车，我又几乎放弃写作，不计代价，孤注一掷，我运气好，都做的不差。</p>

<p>　　电脑前的每一个人，我相信造物者一定赋予你们特殊的才能，很多人只是没有发现而已。也许此刻，有很多莫扎特正在编程序，很多舒马赫正在写文案，很多张曼玉正在当前台，很多李开复正在做中介。我只是比很多人幸运，找到了自己喜欢又适合的。同时我也有很多比你们蠢笨的地方，怎么学都学不会。每一个人，纵然缺点一身，但必然有一些地方是长于他人的，那是你区别于他人的标记，也是造物者公平的地方，就看你能否找到这些标记。</p>

<p>　　没人能让所有人满意，所以让自己和你中意的人满意就可以。你所判定的一切，也许就是你自己内心的投影。人生就是一个不断接纳和抛弃的过程，就是一段迎接冷眼嘲笑孤独前行的旅途。KO不了你的，也许让你更OK,没让你倒下的，也许让你更强大。我也将尽我所能，向在乎我的人创造各种东西，绝不向厌恶我的人解释这是个什么东西。</p>

<p>　　最后我想到一部电影的结尾。朋友们，愿你带走我身上你们中意的那一部分，踩两脚讨厌的那部分。当你站在城墙上，拥抱着你所喜爱的那部分，回头看到人群里背身远去那个叫韩寒的家伙，不妨说一句，那个人样子好怪，他好像一条狗诶。</p>

<p>来源: 作者博客 | 来源日期：2012-4-5</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[韩寒：写给每一个自己]]></title>
			<link>http://blog.nwy.me/blog/2012/04/05/han-han-addressed-to-each/</link>
			<pubDate>2012-04-05T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2012/04/05/han-han-addressed-to-each</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>作为键盘党，下午在用键盘选择文件夹的时候，没有盯对文件夹就shift+delete删除了一个重要文件夹，之前就发生过丢失数据的悲剧，于是给笔记本增加了一块硬盘，重要数据定时同步到光驱位硬盘，不过今天误删除的文件夹还没同步到光驱位硬盘。在ext2分区格式下有许多文件恢复软件，但是这些软件都不支持ext4，或兼容的不太好，如testdisk，虽然可以看到误删的文件但是恢复出来的文件是损坏的。最后通过一番搜索找到了一款支持ext4的的恢复软件extundelete。</p>

<p>安装extundelete，可以去软件主页http://extundelete.sourceforge.net下载编译，或者从服务器获取，不同的发行版的安装方法不同，这里不再详述。</p>

<p>extundelete &#8211;help 查看软件帮助</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Usage: extundelete <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>--<span class="o">]</span> device-file
</span><span class='line'>Options:
</span><span class='line'>  --version, -<span class="o">[</span>vV<span class="o">]</span>       Print version and <span class="nb">exit </span>successfully.
</span><span class='line'>  --help,                Print this <span class="nb">help </span>and <span class="nb">exit </span>successfully.
</span><span class='line'>  --superblock           Print contents of superblock in addition to the rest.
</span><span class='line'>                         If no action is specified <span class="k">then </span>this option is implied.
</span><span class='line'>  --journal              Show content of journal.
</span><span class='line'>  --after dtime          Only process entries deleted on or after <span class="s1">&#39;dtime&#39;</span>.
</span><span class='line'>  --before dtime         Only process entries deleted before <span class="s1">&#39;dtime&#39;</span>.
</span><span class='line'>Actions:
</span><span class='line'>  --inode ino            Show info on inode <span class="s1">&#39;ino&#39;</span>.
</span><span class='line'>  --block blk            Show info on block <span class="s1">&#39;blk&#39;</span>.
</span><span class='line'>  --restore-inode ino<span class="o">[</span>,ino,...<span class="o">]</span>
</span><span class='line'>                         Restore the file<span class="o">(</span>s<span class="o">)</span> with known inode number <span class="s1">&#39;ino&#39;</span>.
</span><span class='line'>                         The restored files are created in ./RESTORED_FILES
</span><span class='line'>                         with their inode number as extension <span class="o">(</span>ie, file.12345<span class="o">)</span>.
</span><span class='line'>  --restore-file <span class="s1">&#39;path&#39;</span>  Will restore file <span class="s1">&#39;path&#39;</span>. <span class="s1">&#39;path&#39;</span> is relative to root
</span><span class='line'>                         of the partition and does not start with a <span class="s1">&#39;/&#39;</span> <span class="o">(</span>it
</span><span class='line'>                         must be one of the paths returned by --dump-names<span class="o">)</span>.
</span><span class='line'>                         The restored file is created in the current
</span><span class='line'>                         directory as <span class="s1">&#39;RECOVERED_FILES/path&#39;</span>.
</span><span class='line'>  --restore-files <span class="s1">&#39;path&#39;</span> Will restore files which are listed in the file <span class="s1">&#39;path&#39;</span>.
</span><span class='line'>                         Each filename should be in the same format as an option
</span><span class='line'>                         to --restore-file, and there should be one per line.
</span><span class='line'>  --restore-all          Attempts to restore everything.
</span><span class='line'>  -j journal             Reads an external journal from the named file.
</span><span class='line'>  -b blocknumber         Uses the backup superblock at blocknumber when opening
</span><span class='line'>                         the file system.
</span><span class='line'>  -B blocksize           Uses blocksize as the block size when opening the file
</span><span class='line'>                         system.  The number should be the number of bytes.
</span></code></pre></td></tr></table></div></figure>


<p>软件支持根据时间，文件路径，inode恢复删除的文件，这里指定文件路径恢复误删文件</p>

<p>根据文件路径恢复也有多种方式，如下：</p>

<p>恢复/dev/sda3里一个被误删除的文件</p>

<p><code>
extundelete /dev/sda3 --restore-file /an/important/file
</code></p>

<p>恢复/dev/sda3里一个被误删除的文件夹</p>

<p><code>
extundelete /dev/sda3 --restore-directory /an/important
</code></p>

<p>恢复/dev/sda3里所有被删除的东西</p>

<p><code>
extundelete /dev/sda3 --restore-all
</code></p>

<p>extundelete恢复误删除的文件不需要进入live环境，也不需要umount误删文件所在分区，运行命令后会在你运行命令的目录下产生一个RECOVERED_FILES/的目录，恢复的文件会按照原来的路径创建在该路径下面，所以做恢复操作的时候一定要把终端路径切换到其他分区下，不能在当前误删文件所在分区操作，否则恢复出来的文件会覆盖误删除的文件，导致恢复出来的部分或全部文件损坏。</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[Linux下ext4分区格式恢复删除文件]]></title>
			<link>http://blog.nwy.me/blog/2011/11/27/ext4-partition-under-linux-format-to-recover-deleted-files/</link>
			<pubDate>2011-11-27T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/11/27/ext4-partition-under-linux-format-to-recover-deleted-files</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>作为一个02年开始使用palm的资深palm用户，对palm有着根深蒂固的感情。在palm的陪伴下，经历了高中大学的学生时代，步入社会，开始工作。palm曾经的辉煌也一去不复返，在这个物质，浮躁，快速化的世界，palm系统的单线程，简洁的特性在全球网络化的时代逐渐淡出人们的视线，随后palm公司发布了webOS，被惠普公司收购。发现跑题已经是我写技术文章的特色之一了，言归正传。</p>

<p>在webOS的开发网站上，针对linux环境只提供了ubuntu发行版的驱动和SDK，而我在几个月前从ubuntu阵营转向简洁轻巧的archlinux阵营。两者采用不通的包管理机制。为了让archlinux识别palm pre，需要先安装设备驱动，既然官方没有不提供，尝试用deb2targz转换失败后，只好自己动手解开deb格式的驱动，通过谷歌了解了一下deb的制作方法后，大概理解了deb的安装方式，解压出来的deb包目录下，将data目录的文件按照文件路径名复制到archlinux对应的目录下，control目录下的postinst文件是安装脚本，如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># kill and remove OLD novacomd upstart</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -e /etc/event.d/novacomd <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>stop novacomd
</span><span class='line'>rm -f /etc/event.d/novacomd
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># remove novacomd from /usr/local/bin</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -e /usr/local/bin/novacomd <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>rm -f /usr/local/bin/novacomd
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># check for new upstart</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -e /etc/init/rc.conf <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -e /etc/init/palm-novacomd.conf <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>rm -f /etc/init/palm-novacomd.conf
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>cp -a  /opt/Palm/novacom/scripts/novacomd-conf    /etc/init/palm-novacomd.conf
</span><span class='line'><span class="k">elif</span> <span class="o">[</span> -e /etc/event.d <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>ln -fs /opt/Palm/novacom/scripts/novacomd-upstart /etc/event.d/palm-novacomd
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># (re)start novacomd</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>stop palm-novacomd <span class="o">||</span> <span class="nb">true</span>
</span><span class='line'>killall -v -q novacomd
</span><span class='line'>start palm-novacomd <span class="o">||</span> <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>直接运行脚本显然是不行的，archlinux没有/etc/init/和/etc/event.d/目录，/etc/init/实际是指向/etc/rc.d/int.d/的一个符号链接文件，/etc/event.d/是ubuntu特有的upstart机制的核心目录，archlinux的服务可以通过特有的rc.conf启动，也可以通过/etc/init.d/或者/etc/rc.d/下建立脚本创建服务。了解脚本后将novacomd复制到/etc/rc.d/,novacomd.conf复制到/etc/conf.d/做完archlinux下的改动后，在终端里输入</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/etc/rc.d/novacom start
</span></code></pre></td></tr></table></div></figure>


<p>提示未找的设备，谷歌一番后在http://www.webos-internals.org/wiki/Accessing_Linux_archlinux 上发现解决方法:&#8221;novacomd doesn&#8217;t work under archlinux , so we have to use ubuntu&#8217;s libusb. &#8220;意想不到的是wiki中给出了一条简便方法，从aur下载网友打包好的novacom驱动，汗，之前怎么没有想到在aur里搜索一下。</p>

<!--more-->


<p>一番折腾后palm pre在archlinux下的驱动搞定了，解压deb驱动包的时候看到过novaterm的文件，运行后登录到手机shell，webOS是linux核心，busybox中带有linux常用命令，于是可以在电脑上查看手机的运行状态了。</p>

<p><img src="http://nwy.me/img/2011/09/Screenshot-ocean@ocean-laptop.png" alt="Screenshot-ocean@ocean-laptop:~" /></p>

<p>显摆几张手机桌面</p>

<p><img src="http://nwy.me/img/2011/09/Unknown_2011-19-09_040802.png" alt="Unknown_2011-19-09_040802" />
<img src="http://nwy.me/img/2011/09/Unknown_2011-19-09_040751.png" alt="Unknown_2011-19-09_040751" />
<img src="http://nwy.me/img/2011/09/Unknown_2011-19-09_040742.png" alt="Unknown_2011-19-09_040742" /></p>

<p> </p>

<p> </p>

<p>接下来安装webOS的SDK，有了之前的经验，直接从aur搜索网友打包好的sdk，下载安装。</p>

<p>手机平台webOS1.45 SDK截图</p>

<p><img src="http://nwy.me/img/2011/09/Screenshot-SDK-1.4.5.465-320x480-Running-Oracle-VM-VirtualBox.png" alt="Screenshot-SDK 1.4.5.465 (320x480) [Running] - Oracle VM VirtualBox" /></p>

<p>TouchPad平板 webOS3.0.2 SDk截图</p>

<p><img src="http://nwy.me/img/2011/09/SDK-3.0.2.652-1024x768-Running-Oracle-VM-VirtualBox_001.png" alt="SDK 3.0.2.652 (1024x768) [Running] - Oracle VM VirtualBox_001" />
<img src="http://nwy.me/img/2011/09/SDK-3.0.2.652-1024x768-Running-Oracle-VM-VirtualBox_003.png" alt="SDK 3.0.2.652 (1024x768) [Running] - Oracle VM VirtualBox_003" /></p>

<p>至此，archlinux下webOS的开发环境搭建完成。</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[Arch Linux下webOS开发平台的搭建]]></title>
			<link>http://blog.nwy.me/blog/2011/09/19/archlinux-development-platform-to-build-next-webos/</link>
			<pubDate>2011-09-19T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/09/19/archlinux-development-platform-to-build-next-webos</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<div class="video-container">
    <embed src="http://player.youku.com/player.php/sid/XMTkyNDg3Nzgw/v.swf" allowfullscreen="true" quality="high" width="540" height="420" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"></embed>       
</div>


				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[未来的手机应该是这样的]]></title>
			<link>http://blog.nwy.me/blog/2011/09/07/the-future-of-mobile-phones-should-be-like/</link>
			<pubDate>2011-09-07T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/09/07/the-future-of-mobile-phones-should-be-like</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>之前安装Gregarius的时候就注意到页面footer部分显示的feed更新时间会乱码，Gregarius对中文的支持很差，后台问题更多。</p>

<p>解决方法：找到util.php文件，做如下改动：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">function rss_locale_date ($fmt, $ts, $addTZOffset = true) {</span>
</span><span class='line'><span class="x">    if (isset($_SERVER[&quot;WINDIR&quot;])) {</span>
</span><span class='line'><span class="x">            //%e doesnt’ exists under windows!</span>
</span><span class='line'><span class="x">            $fmt=str_replace(&quot;%e&quot;,&quot;%#d&quot;,$fmt);</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">     </span>
</span><span class='line'><span class="x">    if ($addTZOffset) {</span>
</span><span class='line'><span class="x">            return iconv(&quot;UTF-8&quot;, &quot;utf-8&quot;, strftime($fmt, $ts +3600 * getConfig </span>
</span><span class='line'><span class="x">    (‘rss.config.tzoffset’)));</span>
</span><span class='line'><span class="x">        }   </span>
</span><span class='line'><span class="x">        return iconv(&quot;UTF-8&quot;, &quot;utf-8&quot;, strftime($fmt, $ts));</span>
</span><span class='line'><span class="x">        //return utf8_encode(strftime($fmt, $ts));</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure>




				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[Gregarius 5.5 feed更新日期乱码问题]]></title>
			<link>http://blog.nwy.me/blog/2011/08/26/gregarius-5-5-feed-garbled-date/</link>
			<pubDate>2011-08-26T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/08/26/gregarius-5-5-feed-garbled-date</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>预感有悲剧要发生了，网站本月的15G带宽流量截止今天已经用掉了11.5G，今天才十八号，距月底还有十二天。看了下了访问统计，似乎是CDN服务器消耗掉的，奇怪的是消耗掉的流量主要集中在一个页面。先观察，等月底流量不够再移除这个页面。</p>

<p><img src="http://nwy.me/img/2011/08/traffic_001.png" alt="traffic_001" /></p>

<!--more-->


<p><img src="http://nwy.me/img/2011/08/traffic.png" alt="traffic" />
<img src="http://nwy.me/img/2011/08/traffic_003.png" alt="traffic_003" />
<img src="http://nwy.me/img/2011/08/traffic_004.png" alt="traffic_004" /></p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[无题]]></title>
			<link>http://blog.nwy.me/blog/2011/08/18/untitled/</link>
			<pubDate>2011-08-18T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/08/18/untitled</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<ol>
<li><p>他们只会否定。低头看书，抬头看世界，看到不爽就唧唧歪歪。但他们没有社会经验，所以唧唧歪歪起来很烦人，因为那点阅读量的加持，得比德比的，还头头是道，要是有个人帮我cei死丫就太好了。</p></li>
<li><p>看问题基本上都是消极的。说好听是怀疑精神，说难听点就是啥都不会做。还给人添堵。</p></li>
<li><p>什么都看不惯，什么都看不上眼。情商不高，耍小聪明。</p></li>
</ol>


<p>标题有些无厘头，王大锤是论坛里一网友的马甲，大师级别的人物，马甲的名字都起的这么德味<sup>_<sup>,据称做过季羡林的编辑，&#8221;青年领袖&#8221;&#8220;灵魂大师&#8221;也是论坛里的网友给他的称谓。</sup></sup></p>

<p>发现自己三条毛病都有，特转发此文，告诫自己。</p>

<p>PS:上个月换了网络环境，发现被ISP劫持，因为用Fx+Autoproxy，所以就没有注意，后来发现网络中断后再连接的时候会推送广告，无法忍受，果断登录路由指定DNS为Google的DNS，于是世界清静了。需要指出的是用Google的DNS是不能翻墙的，DNS的UDP包也是会被墙劫持篡改的。</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[青年领袖灵魂大师王大锤对青年人的教诲]]></title>
			<link>http://blog.nwy.me/blog/2011/08/07/youth-leadership-famous-editor-wang-sledgehammer-soul-masters-teaching-for-young-people/</link>
			<pubDate>2011-08-07T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/08/07/youth-leadership-famous-editor-wang-sledgehammer-soul-masters-teaching-for-young-people</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>文章作者： <a title="由 陈皓 发布" href="http://coolshell.cn/articles/author/haoel" rel="author">陈皓</a> 转载出处：<a href="http://coolshell.cn/articles/4990.html">http://coolshell.cn/articles/4990.html</a></p>

<p>月光博客6月12日发表了《<a href="http://www.williamlong.info/archives/2700.html" target="_blank">写给新手程序员的一封信</a>》，翻译自《<a href="http://blog.akash.im/an-open-letter-to-those-who-want-to-start" target="_blank">An open letter to those who want to start programming</a>》，我的朋友（他在本站的id是<a href="http://coolshell.cn/?author=3" target="_blank">Mailper</a>）告诉我，他希望在酷壳上看到一篇更具操作性的文章。因为他也是喜欢编程和技术的家伙，于是，我让他把他的一些学习Python和Web编程的一些点滴总结一下。于是他给我发来了一些他的心得和经历，我在把他的心得做了不多的增改，并根据我的经历增加了“进阶”一节。<strong>这是一篇由新手和我这个老家伙根据我们的经历完成的文章</strong>。</p>

<p>我的这个朋友把这篇文章取名叫Build Your Programming Technical Skills，我实在不知道用中文怎么翻译，但我在写的过程中，<strong>我觉得这很像一个打网游做任务升级的一个过程，所以取名叫“技术练级攻略”，题目有点大，呵呵，这个标题纯粹是为了好玩</strong>。<strong>这里仅仅是在分享Mailper和我个人的学习经历。</strong>（注：省去了我作为一个初学者曾经学习过的一些技术(今天明显过时了)，如：Delphi/Power builder，也省去了我学过的一些我觉得没意思的技术Lotus Notes/ActiveX/COM/ADO/ATL/.NET ……）</p>

<h4>前言</h4>


<p>你是否觉得自己从学校毕业的时候只做过小玩具一样的程序？<wbr>走入职场后哪怕没有什么经验也可以把以下这些课外练习走一遍（朋友的抱怨：学校课程总是从理论出发，</wbr><wbr>作业项目都看不出有什么实际作用，不如从工作中的需求出发）</wbr></p>

<p>建议：</p>

<ul>
<li>不要乱买书，不要乱追新技术新名词，<wbr>基础的东西经过很长时间积累而且还会在未来至少10年通用。</wbr>
</li>
    <li>回顾一下历史，看看历史上时间线上技术的发展，你才能明白明天会是什么样。</li>
    <li>一定要动手，例子不管多么简单，<wbr>建议至少自己手敲一遍看看是否理解了里头的细枝末节。</wbr>
</li>
    <li>一定要学会思考，思考为什么要这样，而不是那样。还要举一反三地思考。</li>
</ul>


<p><strong>注</strong>：你也许会很奇怪为什么下面的东西很偏Unix/Linux，这是因为我觉得Windows下的编程可能会在未来很没有前途，原因如下：</p>

<p> </p>

<ul>
<li>现在的用户界面几乎被两个东西主宰了，1）Web，2）移动设备iOS或Android。Windows的图形界面不吃香了。</li>
    <li>越来越多的企业在用成本低性能高的Linux和各种开源技术来构架其系统，Windows的成本太高了。</li>
    <li>微软的东西变得太快了，很不持久，他们完全是在玩弄程序员。详情参见《<a title="Windows编程革命简史" href="http://coolshell.cn/articles/3008.html" target="_blank">Windows编程革命史</a>》</li>
</ul>


<p>所以，我个人认为以后的趋势是前端是Web+移动，后端是Linux+开源。开发这边基本上没Windows什么事。</p>

<h4>启蒙入门</h4>


<p><strong>1、 学习一门脚本语言，例如Python/Ruby</strong></p>

<p>可以让你摆脱对底层语言的恐惧感，脚本语言可以让你很快开发出能用得上的小程序。实践项目:</p>

<ul>
<li>处理文本文件，或者csv (关键词 python csv, python open, python sys) 读一个本地文件，逐行处理（例如 word count，或者处理log）</li>
    <li>遍历本地文件系统 (sys, os, path)，例如写一个程序统计一个目录下所有文件大小并按各种条件排序并保存结果</li>
    <li>跟数据库打交道 (python sqlite)，写一个小脚本统计数据库里条目数量</li>
    <li>学会用各种print之类简单粗暴的方式进行调试</li>
    <li>学会用Google (phrase, domain, use reader to follow tech blogs)</li>
</ul>


<p>为什么要学脚本语言，因为他们实在是太方便了，很多时候我们需要写点小工具或是脚本来帮我们解决问题，你就会发现正规的编程语言太难用了。</p>

<p><strong>2、 用熟一种程序员的编辑器(不是IDE) 和一些基本工具</strong></p>

<ul>
<li>Vim / Emacs / Notepad++，学会如何配置代码补全，外观，外部命令等。</li>
    <li>Source Insight (或 ctag)</li>
</ul>


<p>使用这些东西不是为了Cool，而是这些编辑器在查看、修改代码/配置文章/日志会更快更有效率。</p>

<p><strong>3、 熟悉Unix/Linux Shell和常见的命令行</strong></p>

<ul>
<li>如果你用windows，至少学会用虚拟机里的linux， vmware player是免费的，装个Ubuntu吧</li>
    <li>一定要少用少用图形界面。</li>
    <li>学会使用man来查看帮助</li>
    <li>文件系统结构和基本操作 ls/chmod/chown/rm/find/ln/cat/mount/mkdir/tar/gzip …</li>
    <li>学会使用一些文本操作命令 sed/awk/grep/tail/less/more …</li>
    <li>学会使用一些管理命令 ps/top/lsof/netstat/kill/tcpdump/iptables/dd…</li>
    <li>了解/etc目录下的各种配置文章，学会查看/var/log下的系统日志，以及/proc下的系统运行信息</li>
    <li>了解正则表达式，使用正则表达式来查找文件。</li>
</ul>


<p>对于程序员来说Unix/Linux比Windows简单多了。（参看我四年前CSDN的博文《<a href="http://blog.csdn.net/haoel/article/details/1533720" target="_blank">其实Unix很简单</a>》）学会使用Unix/Linux你会发现图形界面在某些时候实在是太难用了，相当地相当地降低工作效率。</p>

<p><strong>4、 学习Web基础（HTML/CSS/JS) + 服务器端技术 (LAMP)</strong></p>

<p>未来必然是Web的世界，学习WEB基础的最佳网站是<a href="http://www.w3school.com.cn/" target="_blank">W3School</a>。</p>

<ul>
<li>学习HTML基本语法</li>
    <li>学习CSS如何选中HTML元素并应用一些基本样式（关键词：box model）</li>
    <li>学会用  Firefox + Firebug 或 chrome 查看你觉得很炫的网页结构，并动态修改。</li>
    <li>学习使用Javascript操纵HTML元件。理解DOM和动态网页（<a href="http://oreilly.com/catalog/9780596527402" target="_blank">http://oreilly.com/catalog/9780596527402</a>) 网上有免费的章节，足够用了。或参看 <a href="http://www.w3school.com.cn/htmldom/index.asp" target="_blank">DOM</a> 。</li>
    <li>学会用  Firefox + Firebug 或 chrome 调试Javascript代码（设置断点，查看变量，性能，控制台等）</li>
    <li>在一台机器上配置<a href="http://coolshell.cn/articles/www.apache.org" target="_blank">Apache </a>或 <a href="http://coolshell.cn/articles/nginx.net" target="_blank">Nginx</a>
</li>
    <li>学习<a href="http://coolshell.cn/articles/www.php.net" target="_blank">PHP</a>，让后台PHP和前台HTML进行数据交互，对服务器相应浏览器请求形成初步认识。实现一个表单提交和反显的功能。</li>
    <li>把PHP连接本地或者远程数据库 MySQL（MySQL 和 SQL现学现用够了）</li>
    <li>跟完一个名校的网络编程课程（例如：<a href="http://www.stanford.edu/%7Eouster/cgi-bin/cs142-fall10/index.php" target="_blank">http://www.stanford.edu/~ouster/cgi-bin/cs142-fall10/index.php</a> ) 不要觉得需要多于一学期时间，大学生是全职一学期选3-5门课，你业余时间一定可以跟上</li>
    <li>学习一个javascript库（例如jQuery 或 ExtJS）+  Ajax (异步读入一个服务器端图片或者数据库内容）+JSON数据格式。</li>
    <li>HTTP: The Definitive Guide 读完前4章你就明白你每天上网用浏览器的时候发生的事情了(proxy, gateway, browsers)</li>
    <li>做个小网站（例如：一个小的留言板，支持用户登录，Cookie/Session，增、删、改、查，上传图片附件，分页显示）</li>
    <li>买个域名，租个空间，做个自己的网站。</li>
</ul>


<h4>
<!--more-->进阶加深</h4>


<p><strong>1、 C语言和操作系统调用</strong></p>

<ul>
<li>重新学C语言，理解指针和内存模型，用C语言实现一下各种经典的算法和数据结构。推荐《<a href="http://product.china-pub.com/197050">计算机程序设计艺术</a>》、《<a href="http://product.china-pub.com/31701" target="_blank">算法导论</a>》和《<a href="http://product.china-pub.com/209243" target="_blank">编程珠玑</a>》。</li>
    <li>学习<a title="（麻省理工免费课程）计算机科学和编程导论" href="http://coolshell.cn/articles/3723.html" target="_blank">（麻省理工免费课程）计算机科学和编程导论</a>
</li>
    <li>学习<a title="（麻省理工免费课程）C语言内存管理和C++面向对象编程" href="http://coolshell.cn/articles/2474.html" target="_blank">（麻省理工免费课程）C语言内存管理</a>
</li>
    <li>学习Unix/Linux系统调用（<a href="http://product.china-pub.com/30181" target="_blank">Unix高级环境编程</a>），，了解系统层面的东西。</li>
</ul>


<ul>
<li>用这些系统知识操作一下文件系统，用户（实现一个可以拷贝目录树的小程序）</li>
    <li>用fork/wait/waitpid写一个多进程的程序，用pthread写一个多线程带同步或互斥的程序。多进程多进程购票的程序。</li>
    <li>用signal/kill/raise/alarm/pause/sigprocmask实现一个多进程间的信号量通信的程序。</li>
    <li>学会使用gcc和gdb来编程和调试程序（参看我的《<a href="http://coolshell.cn/articles/blog.csdn.net/haoel/article/details/2879" target="_blank">用gdb调试程序</a>》）</li>
    <li>学会使用makefile来编译程序。（参看我的《<a href="http://coolshell.cn/articles/blog.csdn.net/haoel/article/details/2886" target="_blank">跟我一起写makefile</a>》）</li>
    <li>IPC和Socket的东西可以放到高级中来实践。</li>
    <li>学习Windows SDK编程（<a href="http://product.china-pub.com/52880" target="_blank">Windows 程序设计 </a>，<a href="http://product.china-pub.com/3804" target="_blank">MFC程序设计</a>）</li>
</ul>


<ul>
<li>写一个窗口，了解WinMain/WinProcedure，以及Windows的消息机制。</li>
    <li>写一些程序来操作Windows SDK中的资源文件或是各种图形控件，以及作图的编程。</li>
    <li>学习如何使用MSDN查看相关的SDK函数，各种WM_消息以及一些例程。</li>
    <li>这本书中有很多例程，在实践中请不要照抄，试着自己写一个自己的例程。</li>
    <li>不用太多于精通这些东西，因为GUI正在被Web取代，主要是了解一下Windows 图形界面的编程。@<a title="virushuo" href="http://twitter.com/#%21/virushuo" data-user-id="49913">virushuo</a> 说：“ 我觉得GUI确实不那么热门了，但充分理解GUI工作原理是很重要的。包括移动设备开发，如果没有基础知识仍然很吃力。或者说移动设备开发必须理解GUI工作，或者在win那边学，或者在mac/iOS上学”。</li>
</ul>


<p><strong>2、学习Java</strong></p>

<ul>
<li>Java 的学习主要是看经典的Core Java 《<a href="http://product.china-pub.com/208978" target="_blank">Java 核心技术编程</a>》和《<a href="http://product.china-pub.com/34838" target="_blank">Java编程思想</a>》（有两卷，我仅链了第一卷，足够了，因为Java的图形界面了解就可以了）</li>
    <li>学习JDK，学会查阅Java API Doc <a href="http://download.oracle.com/javase/6/docs/api/">http://download.oracle.com/javase/6/docs/api/</a>
</li>
    <li>了解一下Java这种虚拟机语言和C和Python语言在编译和执行上的差别。从C、Java、Python思考一下“跨平台”这种技术。</li>
    <li>学会使用IDE Eclipse，使用Eclipse 编译，调试和开发Java程序。</li>
    <li>建一个Tomcat的网站，尝试一下JSP/Servlet/JDBC/MySQL的Web开发。把前面所说的那个PHP的小项目试着用JSP和Servlet实现一下。</li>
</ul>


<div><strong>3、Web的安全与架构</strong></div>


<div>
<ul>
<li>学习HTML5，网上有很多很多教程，以前<a href="http://coolshell.cn/" target="_blank">酷壳</a>也介绍过很多，我在这里就不罗列了。</li>
    <li>学习Web开发的安全问题（参考<a title="新浪微博的XSS攻击" href="http://coolshell.cn/articles/4914.html" target="_blank">新浪微博被攻击的这个事</a>，以及<a href="http://guides.rubyonrails.org/security.html" target="_blank">Ruby的这篇文章</a>）</li>
    <li>学习HTTP Server的rewrite机制，Nginx的反向代理机制，<a href="http://en.wikipedia.org/wiki/Fast_CGI" target="_blank">fast-cgi</a>（如：<a href="http://php-fpm.org/" target="_blank">PHP-FPM</a>）</li>
    <li>学习Web的静态页面缓存技术。</li>
    <li>学习Web的异步工作流处理，数据Cache，数据分区，负载均衡，水平扩展的构架。</li>
    <li><strong>实践任务：</strong></li>
</ul>
<ul>
<li>使用HTML5的canvas 制作一些Web动画。</li>
    <li>尝试在前面开发过的那个Web应用中进行SQL注入，JS注入，以及XSS攻击。</li>
    <li>把前面开发过的那个Web应用改成构造在Nginx + PHP-FPM + 静态页面缓存的网站</li>
</ul>
</div>


<p><strong>4、学习关系型数据库</strong></p>

<ul>
<li>你可以安装MSSQLServer或MySQL来学习数据库。</li>
    <li>学习教科书里数据库设计的那几个范式，1NF，2NF，3NF，……</li>
    <li>学习数据库的存过，触发器，视图，建索引，游标等。</li>
    <li>学习SQL语句，明白表连接的各种概念（参看《<a title="图解SQL的Join" href="http://coolshell.cn/articles/3463.html">SQL  Join的图示</a>》）</li>
    <li>学习如何优化数据库查询（参看《<a title="MySQL性能优化的最佳20+条经验" href="http://coolshell.cn/articles/1846.html">MySQL的优化</a>》）</li>
    <li>
<strong>实践任务</strong>：设计一个论坛的数据库，至少满足3NF，使用SQL语句查询本周，本月的最新文章，评论最多的文章，最活跃用户。</li>
</ul>


<p><strong>5、一些开发工具</strong></p>

<ul>
<li>学会使用SVN或Git来管理程序版本。</li>
    <li>学会使用JUnit来对Java进行单元测试。</li>
    <li>学习C语言和Java语言的coding standard 或 coding guideline。（我N年前写过一篇关C语言非常简单的文章——《<a href="http://blog.csdn.net/haoel/article/category/9200/2" target="_blank">编程修养</a>》，这样的东西你可以上网查一下，一大堆）。</li>
    <li>推荐阅读《<a href="http://product.china-pub.com/28351" target="_blank">代码大全</a>》《<a href="http://product.china-pub.com/196374" target="_blank">重构</a>》《<a href="http://product.china-pub.com/196266" target="_blank">代码整洁之道</a>》</li>
</ul>


<h4>高级深入</h4>


<p><strong>1、C++ / Java 和面向对象</strong></p>

<p>我个人以为学好C++，Java也就是举手之劳。但是C++的学习曲线相当的陡。不过，我觉得C++是最需要学好的语言了。参看两篇趣文“<a title="C++ 程序员自信心曲线图" href="http://coolshell.cn/articles/2287.html" target="_blank">C++学习信心图</a>” 和“<a title="“21天教你学会C++”" href="http://coolshell.cn/articles/2250.html" target="_blank">21天学好C++</a>”</p>

<ul>
<li>学习<a title="（麻省理工免费课程）C语言内存管理和C++面向对象编程" href="http://coolshell.cn/articles/2474.html" target="_blank">（麻省理工免费课程）C++面向对象编程</a>
</li>
    <li>读我的 “<a title="如何学好C++语言" href="http://coolshell.cn/articles/4119.html" target="_blank">如何学好C++</a>”中所推荐的那些书至少两遍以上（如果你对C++的理解能够深入到像我所写的《<a href="http://blog.csdn.net/haoel/article/details/1948051" target="_blank">C++虚函数表解析</a>》或是《<a href="http://blog.csdn.net/haoel/article/details/3081328" target="_blank">C++对象内存存局</a>（<a href="http://blog.csdn.net/haoel/article/details/3081328" target="_blank">上</a>）（<a href="http://blog.csdn.net/haoel/article/details/3081385" target="_blank">下</a>）》，或是《<a href="http://blog.csdn.net/haoel/article/details/1388498" target="_blank">C/C++返回内部静态成员的陷阱</a>》那就非常不错了）</li>
    <li>然后反思为什么C++要干成这样，Java则不是？你一定要学会对比C++和Java的不同。比如，Java中的初始化，垃圾回收，接口，异常，虚函数，等等。</li>
    <li><strong>实践任务：</strong></li>
</ul>


<ul>
<li>用C++实现一个BigInt，支持128位的整形的加减乘除的操作。</li>
    <li>用C++封装一个数据结构的容量，比如hash table。</li>
    <li>用C++封装并实现一个智能指针（一定要使用模板）。</li>
    <li>《<a href="http://product.china-pub.com/25961" target="_blank">设计模式</a>》必需一读，两遍以上，思考一下，这23个模式的应用场景。主要是两点：1）钟爱组合而不是继承，2）钟爱接口而不是实现。（也推荐《<a href="http://product.china-pub.com/27862">深入浅出设计模式</a>》）</li>
    <li><strong>实践任务：</strong></li>
</ul>


<ul>
<li>使用工厂模式实现一个内存池。</li>
    <li>使用策略模式制做一个类其可以把文本文件进行左对齐，右对齐和中对齐。</li>
    <li>使用命令模式实现一个命令行计算器，并支持undo和redo。</li>
    <li>使用修饰模式实现一个酒店的房间价格订价策略——旺季，服务，VIP、旅行团、等影响价格的因素。</li>
    <li>学习STL的用法和其设计概念  - 容器，算法，迭代器，函数子。如果可能，请读一下其源码。</li>
    <li>
<strong>实践任务：</strong>尝试使用面向对象、STL，设计模式、和WindowsSDK图形编程的各种技能</li>
</ul>


<ul>
<li>做一个贪吃蛇或是俄罗斯方块的游戏。支持不同的级别和难度。</li>
    <li>做一个文件浏览器，可以浏览目录下的文件，并可以对不同的文件有不同的操作，文本文件可以打开编辑，执行文件则执行之，mp3或avi文件可以播放，图片文件可以展示图片。</li>
    <li>学习C++的一些类库的设计，如： MFC（看看候捷老师的《<a href="http://product.china-pub.com/3565" target="_blank">深入浅出MFC</a>》） ，Boost, ACE,  CPPUnit，STL （STL可能会太难了，但是如果你能了解其中的设计模式和设计那就太好了，如果你能深入到我写的《<a href="http://blog.csdn.net/haoel/article/details/24058" target="_blank">STL string类的写时拷贝技术</a>》那就非常不错了，ACE需要很强在的系统知识，参见后面的“加强对系统的了解”）</li>
    <li>Java是真正的面向对象的语言，Java的设计模式多得不能再多，也是用来学习面向对象的设计模式的最佳语言了（参看<a title="JDK里的设计模式" href="http://coolshell.cn/articles/3320.html" target="_blank">Java中的设计模式</a>）。</li>
    <li>推荐阅读《<a href="http://product.china-pub.com/195040">Effective Java</a>》 and 《<a href="http://product.china-pub.com/197212">Java解惑</a>》</li>
    <li>学习Java的框架，Java的框架也是多，如Spring, Hibernate，Struts 等等，主要是学习Java的设计，如IoC等。</li>
    <li>Java的技术也是烂多，重点学习J2EE架构以及JMS， RMI, 等消息传递和远程调用的技术。</li>
    <li>学习使用Java做Web Service （<a href="http://download.oracle.com/docs/cd/E17802_01/webservices/webservices/docs/2.0/tutorial/doc/" target="_blank">官方教程在这里</a>）</li>
    <li>
<strong>实践任务： </strong>尝试在Spring或Hibernate框架下构建一个有网络的Web Service的远程调用程序，并可以在两个Service中通过JMS传递消息。</li>
</ul>


<p>C++和Java都不是能在短时间内能学好的，C++玩是的深，Java玩的是广，我建议两者选一个。我个人的学习经历是：</p>

<ul>
<li>深究C++（我深究C/C++了十来年了）</li>
    <li>学习Java的各种设计模式。</li>
</ul>


<p><strong>2、加强系统了解</strong></p>

<p>重要阅读下面的几本书：</p>

<ul>
<li>《<a href="http://product.china-pub.com/197413" target="_blank">Unix编程艺术</a>》了解Unix系统领域中的设计和开发哲学、思想文化体系、原则与经验。你一定会有一种醍醐灌顶的感觉。</li>
    <li>《<a href="http://product.china-pub.com/196770" target="_blank">Unix网络编程卷1，套接字</a>》这是一本看完你就明白网络编程的书。重要注意TCP、UDP，以及多路复用的系统调用select/poll/epoll的差别。</li>
    <li>《<a href="http://product.china-pub.com/35" target="_blank">TCP/IP详解 卷1:协议</a>》- 这是一本看完后你就可以当网络黑客的书。了解以太网的的运作原理，了解TCP/IP的协议，运作原理以及如何TCP的调优。</li>
    <li><strong>实践任务：</strong></li>
</ul>


<ul>
<li>理解什么是阻塞（同步IO），非阻塞（异步IO），多路复用（select, poll, epoll）的IO技术。</li>
    <li>写一个网络聊天程序，有聊天服务器和多个聊天客户端（服务端用UDP对部分或所有的的聊天客户端进Multicast或Broadcast）。</li>
    <li>写一个简易的HTTP服务器。</li>
    <li>《<a href="http://product.china-pub.com/196859" target="_blank">Unix网络编程卷2，进程间通信</a>》信号量，管道，共享内存，消息等各种IPC…… 这些技术好像有点老掉牙了，不过还是值得了解。</li>
    <li><strong>实践任务：</strong></li>
</ul>


<ul>
<li>主要实践各种IPC进程序通信的方法。</li>
    <li>尝试写一个管道程序，父子进程通过管道交换数据。</li>
    <li>尝试写一个共享内存的程序，两个进程通过共享内存交换一个C的结构体数组。</li>
    <li>学习《<a href="http://product.china-pub.com/209058" target="_blank">Windows核心编程</a>》一书。把CreateProcess，Windows线程、线程调度、线程同步（Event,  信号量，互斥量）、异步I/O，内存管理，DLL，这几大块搞精通。</li>
    <li>
<strong>实践任务：</strong>使用CreateProcess启动一个记事本或IE，并监控该程序的运行。把前面写过的那个简易的HTTP服务用线程池实现一下。写一个DLL的钩子程序监控指定窗口的关闭事件，或是记录某个窗口的按键。</li>
    <li>有了多线程、多进程通信，TCP/IP，套接字，C++和设计模式的基本，你可以研究一下ACE了。使用ACE重写上述的聊天程序和HTTP服务器（带线程池）</li>
    <li>
<strong>实践任务：</strong>通过以上的所有知识，尝试</li>
</ul>


<ul>
<li>写一个服务端给客户端传大文件，要求把100M的带宽用到80%以上。（注意，磁盘I/O和网络I/O可能会很有问题，想一想怎么解决，另外，请注意网络传输最大单元MTU）</li>
    <li>了解BT下载的工作原理，用多进程的方式模拟BT下载的原理。</li>
</ul>


<p><strong>3、系统架构</strong></p>

<ul>
<li>负载均衡。HASH式的，纯动态式的。（可以到Google学术里搜一些<a href="http://scholar.google.com.hk/scholar?q=%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1&hl=zh-CN&as_sdt=0&as_vis=1&oi=scholart" target="_blank">关于负载均衡的文章</a>读读）</li>
    <li>多层分布式系统 – 客户端服务结点层、计算结点层、数据cache层，数据层。J2EE是经典的多层结构。</li>
    <li>
<a href="http://en.wikipedia.org/wiki/Content_delivery_Network" target="_blank">CDN系统</a> – 就近访问，内容边缘化。</li>
    <li>
<a href="http://en.wikipedia.org/wiki/Peer-to-peer" target="_blank">P2P式系统</a>，研究一下BT和电驴的算法。比如：<a href="http://en.wikipedia.org/wiki/Distributed_hash_table" target="_blank">DHT算法</a>。</li>
    <li>服务器备份，双机备份系统（Live-Standby和Live-Live系统），两台机器如何通过心跳监测对方？集群主结点备份。</li>
    <li>
<a href="http://en.wikipedia.org/wiki/Virtualization" target="_blank">虚拟化技术</a>，使用这个技术，可以把操作系统当应用程序一下切换或重新配置和部署。</li>
    <li>学习<a href="http://thrift.apache.org/" target="_blank">Thrift</a>，二进制的高性能的通讯中间件，支持数据(对象)序列化和多种类型的RPC服务。</li>
    <li>学习<a href="http://hadoop.apache.org/" target="_blank">Hadoop</a>。 Hadoop框架中最核心的设计就是：MapReduce和HDFS。MapReduce的思想是由Google的一篇论文所提及而被广为流传的，简单的 一句话解释MapReduce就是“任务的分解与结果的汇总”。HDFS是Hadoop分布式文件系统（Hadoop Distributed File System）的缩写，为分布式计算存储提供了底层支持。</li>
    <li>了解<a href="http://en.wikipedia.org/wiki/NoSQL" target="_blank">NoSQL数据库</a>（有人说可能是一个<a title="那些炒作过度的技术和概念" href="http://coolshell.cn/articles/3609.html" target="_blank">过渡炒作的技术</a>）， 不过因为超大规模以及高并发的纯动态型网站日渐成为主流，而SNS类网站在数据存取过程中有着实时性等刚性需求，这使得目前NoSQL数据库慢慢成了人们 所关注的焦点，并大有成为取代关系型数据库而成为未来主流数据存储模式的趋势。当前NoSQL数据库很多，大部分都是开源的，其中比较知名的 有：MemcacheDB、Redis、Tokyo Cabinet(升级版为Kyoto Cabinet)、Flare、MongoDB、CouchDB、Cassandra、Voldemort等。</li>
</ul>


<p>写了那么多，回顾一下，觉得自己相当的有成就感。希望大家不要吓着，我自己这十来年也在不断地学习，今天我也在学习中，人生本来就是一个不断学习和练级的过程。<strong>不过，一定有漏的，也有不对的，还希望大家补充和更正</strong>。（<strong>我会根据大家的反馈随时更新此文</strong>）欢迎大家通过我的微博（<a href="http://weibo.com/haoel" target="_blank">@左耳朵耗子</a>）和twitter（@<a href="http://twitter.com/haoel" target="_blank">haoel</a>）和我交流。</p>

<p><em><strong>—– 更新  2011/07/19 —–</strong></em></p>

<p>1）有朋友奇怪为什么我在这篇文章开头说了web+移动，却没有在后面提到iOS/Android的前端开发。因为我心里有一种感觉，移动设备上的UI最终也会被Javascript取代。大家可以用iPhone或Android看看google+，你就会明白了。</p>

<p>2）有朋友说我这里的东西太多了，不能为了学习而学习，我非常同意。我在文章的前面也说了要思考。另外，千万不要以为我说的这些东西是一些新的技 术，这份攻略里95%以上的全是基础。而且都是久经考验的基础技术。即是可以让你一通百通的技术，也是可以让你找到一份不错工作的技术。</p>

<p>3）有朋友说学这些东西学完都40了，还不如想想怎么去挣钱。我想告诉大家，一是我今年还没有40岁，二是学无止境啊，三是我不觉得挣钱有多难，难 的是怎么让你值那么多钱？无论是打工还是创业，是什么东西让你自己的价值，让你公司的价值更值钱？别的地方我不敢说，对于互联网或IT公司来说，技术实力 绝对是其中之一。</p>

<p>4）有朋友说技术都是工具，不应该如此痴迷这句话没有错，有时候我们需要更多的是抬起头来看看技术以外的事情，或者是说我们在作技术的时候不去思考为什么会有这个技术，为什么不是别的，问题不在于技术，问题在于我们死读书，读死书，成了技术的书呆子。</p>

<p>5） 对于NoSQL，最近比较火，但我对其有点保守，所以，我只是说了解就可以。对于Hadoop，我觉得其在分布式系统上有巨大的潜力，所以需要学习。 对于关系型数据库，的确是很重要的东西，这点是我的疏忽，在原文里补充。</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[程序员技术练级攻略]]></title>
			<link>http://blog.nwy.me/blog/2011/07/24/programmers-technical-leveling-guide/</link>
			<pubDate>2011-07-24T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/07/24/programmers-technical-leveling-guide</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<div id="content">
<div class="entry">
<h5>原文出处：<a href="http://liluo.org/2011/05/curl-%E7%AE%80%E5%8D%95%E4%BD%9C%E5%BC%8A%E6%9D%A1/">http://liluo.org/2011/05/curl-%E7%AE%80%E5%8D%95%E4%BD%9C%E5%BC%8A%E6%9D%A1/</a>
</h5>
<h5>1  curl是什么？</h5>
curl 是一款命令行多协议支持的服务器访问工具,可以用它来访问HTTP服务器，就像浏览器一样。当然了，它也是可以通过FTP下载或上传文件，下次再说这块。
<h5>2 基本应用</h5>
<blockquote>curl http://www.douban.com</blockquote>
上面的命令会在屏幕上输出服务器的响应信息，需要headers信息加 -i/&#8211;include 参数，只需要headers信息可以使用 -I/&#8211;head。

重定向输出：
<blockquote>curl http://www.douban.com > response.html
curl http://www.douban.com | grep &#8216;douban.com&#8217;</blockquote>
如果使用管道，默认会有一个进程信息显示出来，可以使用 -s/&#8211;silent 来不显示它们：
<blockquote>curl -s http://www.douban.com | grep &#8216;douban.com&#8217;</blockquote>
如果想保存服务器返回的内容的话，除了使用 > 重定向到一个文件外，还可以使用 -o/&#8211;output 参数指定需要保存到的文件：
<blockquote>curl http://www.douban.com -o response.html</blockquote>
非文本文件也能这样保存：
<blockquote>curl http://img3.douban.com/pics/nav/lg_main_a7.png -o logo.png</blockquote>
原名保存使用 -O/&#8211;remote-name 选项：
<blockquote>curl http://img3.douban.com/pics/nav/lg_main_a7.png -O</blockquote>
不过豆瓣的图片有简单的防盗链，所以可能下载不成功 : ( 继续往下看
<h5>
<!--more-->3   发送数据</h5>
GET 方法的请求没什么特殊的，直接在 url 中放上数据就可以了：
<blockquote>curl http://www.douban.com/?name=luo
curl http://www.douban.com/?name=小落</blockquote>
POST 方法的话就需要使用 -d/&#8211;data 参数，只要有这个参数，即使值是空字符串，那么出去的就是 POST 方法的访问：
<blockquote>curl -d &#8216;name=luoluo&passwd=*****&#8217; http://www.douban.com</blockquote>
<h5>4   头部信息</h5>
先说最常构造的两个 User-Agent 和 Referer ，这两个分别使用 -A/&#8211;user-agent 和 -e/&#8211;referer 来指定：
<blockquote>curl -A Chrome http://www.douban.com
curl -e http://liluo.org http://www.douban.com</blockquote>
包含这两个头部信息，所有的头部信息参数都可以使用 -H/&#8211;header 来设置：
<blockquote>curl -H Referer:http://liluo.org http://www.douban.com
curl -H User-Agent:Chrome -H Accept-Language:zh-cn http://www.douban.com</blockquote>
<h5>5   COOKIE控制</h5>
curl 是可以支持带 cookie 的交互行为的。使用方式是 -D/&#8211;dump-header 用于指定一个文件保存获取到的 cookie 信息（实际上包含了整个头部信息）， 然后用 -b/&#8211;cookie 指定一文件用于读取保存的 cookie 。
<blockquote>curl http://www.douban.com -D cookie.txt
curl http://www.douban.com -b cookie.txx</blockquote>
-D 保存出来的头部信息就是以纯文本形式存放的，所以，你可以方便地随便修改。
<h5>6   代理和通配符</h5>
6.1   代理设置

使用 -x/&#8211;proxy 参数：
<blockquote>curl -x http://web.proxy.url http://www.douban.com</blockquote>
6.2   通配符
<blockquote>curl -O http://www.douban.com/~liluo/screen[1-10].jpg
curl -O http://www.douban.com/~{liluo,luoluo}/[001-201].jpg</blockquote>
反向引用分组：
<blockquote>curl -o #2_#1.jpg http://www.douban.com/~{liluo,luo}/[001-201].jpg</blockquote>
</div>
</div>


				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[curl 简单作弊条]]></title>
			<link>http://blog.nwy.me/blog/2011/06/22/simple-cheat-curl-bar/</link>
			<pubDate>2011-06-22T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/06/22/simple-cheat-curl-bar</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<div><a href="http://doc.linuxpk.com/52705.html">本文来自：Linux宝库 &#8211; http://doc.linuxpk.com/52705.html</a></div>


<p> </p>

<p>在执行某个命令的时候，有时需要依赖于前一个命令是否执行成功。例如，假设你希望将一个目录中的文件全部拷贝到另外一个目录中后，然后删除源目录中的全部文件。在删除之前，你希望能够确信拷贝成功，否则就有可能丢失所有的文件。</p>

<p>在本章中，我们将讨论：</p>

<h1>命令执行控制。</h1>

<h1>命令组合。</h1>

<p>如果希望在成功地执行一个命令之后再执行另一个命令，或者在一个命令失败后再执行另一个命令，&amp;&amp;和||可以完成这样的功能。相应的命令可以是系统命令或shell脚本。</p>

<p>Shell还提供了在当前shell或子shell中执行一组命令的方法，即使用（）和{}。</p>

<h1>6.1 使用&amp;&amp;</h1>

<p>使用&amp;&amp;的一般形式为：</p>

<p>命令1 &amp;&amp; 命令2</p>

<p>这种命令执行方式相当地直接。&amp;&amp;左边的命令（命令1）返回真(即返回0，成功被执行）后，&amp;&amp;右边的命令（命令2）才能够被执行；换句话说，“如果这个命令执行成功&amp;&amp;那么执行这个命令”。</p>

<p>这里有一个使用&amp;&amp;的简单例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>
</span><span class='line'><span class="nv">$ </span>cp justing.doc justing.bak <span class="o">&amp;&amp;</span> <span class="nb">echo</span> “if you are seeing this <span class="k">then </span>cp was OK”
</span></code></pre></td></tr></table></div></figure>


<h1>if you are seeing this then cp was OK</h1>

<p>在上面的例子中，&amp;&amp;前面的拷贝命令执行成功，所以&amp;&amp;后面的命令（echo命令）被执行。</p>

<p>再看一个更为实用的例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mv /apps/bin /apps/dev/bin <span class="o">&amp;&amp;</span> rm -r /apps/bin　
</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子中，/apps/bin目录将会被移到/apps/dev/bin目录下，如果它没有被成功执行，就不会删除/apps/bin目录。</p>

<p>在下面的例子中，文件quarter_end.txt首先将被排序并输出到文件quarter.sorted中，只有这一命令执行成功之后，文件quarter.sorted才会被打印出来：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sort quarter_end.txt &gt; quarter.sorted <span class="o">&amp;&amp;</span> lp quarter.sorted
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h1>6.2 使用||</h1>

<p>使用||的一般形式为：</p>

<p>命令1 || 命令2</p>

<p>||的作用有一些不同。如果||左边的命令（命令1）未执行成功，那么就执行||右边的命令（命令2）；或者换句话说，“如果这个命令执行失败了|| 那么就执行这个命令”。</p>

<p>这里有一个使用||的简单例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cp wopper.txt wopper.bak <span class="o">||</span> <span class="nb">echo</span> “if you are seeing this cp failed”
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp: wopper.txt: No such file or directory
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if </span>you are seeing this cp failed
</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子中，拷贝命令没有能够被成功执行，因此||后面的命令被执行。</p>

<p>这里有一个更为实用的例子。我希望从一个审计文件中抽取第1个和第5个域，并将其输出到一个临时文件中，如果这一操作未成功，我希望能够收到一个相应邮件：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk ‘<span class="o">{</span>print <span class="nv">$5</span><span class="o">}</span>’ acc.qtr &gt; qtr.tmp <span class="o">||</span> <span class="nb">echo</span> “Sorry the payroll extraction didn’t work” | mail dave
</span></code></pre></td></tr></table></div></figure>


<p>在这里不只可以使用系统命令；这里我们首先对month_end.txt文件执行了一个名为comet的shell脚本，如果该脚本未执行成功，该shell将结束。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>comet month_end.txt <span class="o">||</span> <span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<h1>6.3 用（）和{}将命令结合在一起</h1>

<p>如果希望把几个命令合在一起执行， shell提供了两种方法。既可以在当前shell也可以在子shell中执行一组命令。</p>

<p>为了在当前shell中执行一组命令，可以用命令分隔符隔开每一个命令，并把所有的命令用圆括号（）括起来。</p>

<p>它的一般形式为：</p>

<p>（命令1;命令2;&#8230;）</p>

<p>如果使用{ }来代替（），那么相应的命令将在子shell而不是当前shell中作为一个整体被执行，只有在{ }中所有命令的输出作为一个整体被重定向时，其中的命令才被放到子shell中执行，否则在当前shell执行。它的一般形式为：</p>

<p>{命令1;命令2;&#8230; }</p>

<p>我很少单独使用这两种方法。我一般只和&amp;&amp;或||一起使用这两种方法。</p>

<p>再回到前面那个comet脚本的例子，如果这个脚本执行失败了，我很可能会希望执行两个以上的命令，而不只是一个命令。我可以使用这两种方法。这是原先那个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>comet month_end.txt <span class="o">||</span> <span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在如果该脚本执行失败了，我希望先给自己发个邮件，然后再退出，可以用下面的方法来实现：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>comet month_end <span class="o">||</span> <span class="o">(</span><span class="nb">echo</span> “Hello, guess what! Comet did not work”|mail dave;exit<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子中，如果只使用了命令分隔符而没有把它们组合在一起，shell将直接执行最后一个命令（exit）。</p>

<p>我们再回头来看看前面那个使用&amp;&amp;排序的例子，下面是原来的那个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sort quarter_end.txt &gt; quarter.sorted <span class="o">&amp;&amp;</span> lp quarter.sorted
</span></code></pre></td></tr></table></div></figure>


<p>使用命令组合的方法，如果sort命令执行成功了，可以先将输出文件拷贝到一个日志区，然后再打印。</p>

<h1>6.4 小结</h1>

<p>在编写shell脚本时，使用&amp;&amp;和||对构造判断语句非常有用。如果希望在前一个命令执行失败的情况不执行后面的命令，那么本章所讲述的方法非常简单有效。使用这样的方法，可以根据&amp;&amp;或||前面命令的返回值来控制其后面命令的执行。</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[Linux下命令执行顺序]]></title>
			<link>http://blog.nwy.me/blog/2011/06/22/linux-command-execution-order/</link>
			<pubDate>2011-06-22T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/06/22/linux-command-execution-order</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>虽然平时订阅网站或网友的博客使用的是谷歌阅读器，但是由于在墙内，谷歌的许多服务由于种种原因无法正常访问，在电脑上或手机上都是通过某种类似跨栏运动的方法访问谷歌的服务，于是搭建了一个人的RSS阅读器，将自己谷歌阅读器的订阅复制到上面，这样就可以无障碍阅读自己订阅的一些网站博客。</p>

<p>访问地址：<a href="http://reader.nwy.me">http://reader.nwy.me</a> 或 <a href="http://nwy.me/reader">http://nwy.me/reader</a></p>

<p>第一个地址还在解析中，可能需要做跨栏运动才能访问，怕闪到腰的用后面的网址访问。</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[我的一些订阅]]></title>
			<link>http://blog.nwy.me/blog/2011/06/20/some-of-my-subscription/</link>
			<pubDate>2011-06-20T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/06/20/some-of-my-subscription</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p><img src="http://nwy.me/img/2011/06/Palm-Pre-Slide.png" alt="Palm-Pre-Slide" /></p>

<p>ca.canucksoftware.patches.keytoss-orientation-manager-145 - 1.4.5-1 - keytoss-orientation-manager-145</p>

<p>ca.canucksoftware.patches.prevent-log-uploads-to-palm - 1.4.5-1 - Prevent Log Uploads to Palm</p>

<p>ca.canucksoftware.patches.prevent-metrix-log-uploads - 1.4.5-1 - Prevent Metrix Log Uploads</p>

<p>com.treo8.patches.device-menu-mods-v1-mod-treo8 - 1.4.5.33.4 - Device menu mods v1 mod treo8</p>

<p>org.webosinternals.patches.app-catalog-show-app-details - 1.4.5-139 - Show App Details</p>

<p>org.webosinternals.patches.app-catalog-show-download-count - 1.4.5-139 - Show Download Count</p>

<p>org.webosinternals.patches.app-launcher-advanced-configuration-for-app-launcher - 1.4.5-73 - Advanced Configuration for App Launcher</p>

<p>org.webosinternals.patches.app-launcher-glass-effect - 1.4.5-1 - Glass Effect</p>

<p>org.webosinternals.patches.browser-hold-tap-context-menu - 1.4.5-131 - Hold Tap Context Menu</p>

<p>org.webosinternals.patches.browser-multi-mod - 1.4.5-36 - Multi Mod</p>

<p>org.webosinternals.patches.browser-send-to-relego - 1.4.5-35 - Send to Relego</p>

<p>org.webosinternals.patches.browser-url-shorten-in-browser - 1.4.5-97 - URL Shorten in Browser</p>

<p>org.webosinternals.patches.browser-view-source-of-webpage - 1.4.5-0 - View Source of Webpage</p>

<p>org.webosinternals.patches.camera-capture-with-volume-keys - 1.4.5-131 - Capture with Volume Keys</p>

<p>org.webosinternals.patches.camera-improved-photo-naming-pre - 1.4.5-1 - Improved Photo Naming PRE</p>

<p>org.webosinternals.patches.camera-simple-shutter-sound-off - 1.4.5-1 - Simple Shutter Sound Off</p>

<p>org.webosinternals.patches.clock-alarm-daily-options - 1.4.5-1 - Alarm Daily Options</p>

<p>org.webosinternals.patches.clock-more-default-snooze-times - 1.4.5-1 - More Default Snooze Times</p>

<p>org.webosinternals.patches.contacts-add-sync-now - 1.4.5-1 - Add Sync Now</p>

<p>org.webosinternals.patches.contacts-swipe-to-delete - 1.4.5-1 - Swipe to Delete</p>

<p>org.webosinternals.patches.email-email-mega-mix - 1.4.5-100 - Email Mega Mix</p>

<p>org.webosinternals.patches.email-save-attachments-to-downloads-folder - 1.4.5-142 - Save Attachments To Downloads Folder</p>

<p>org.webosinternals.patches.messaging-enter-key-for-new-line - 1.4.5-143 - Enter Key for New Line</p>

<p>org.webosinternals.patches.messaging-timestamps-builtin - 1.4.5-1 - Timestamps Builtin</p>

<p>org.webosinternals.patches.misc-unthrottle-download-manager - 1.4.5-137 - Unthrottle Download Manager</p>

<p>org.webosinternals.patches.mojo-smooth-scrolling - 1.4.5-118 - Smooth Scrolling</p>

<p>org.webosinternals.patches.music-player-banshee-linux-compat - 1.4.5-1 - Banshee Linux Compat</p>

<p>org.webosinternals.patches.notifications-just-charge-by-default - 1.4.5-1 - Just Charge By Default</p>

<p>org.webosinternals.patches.pdf-viewer-pdf-redux - 1.4.5-131 - PDF Redux</p>

<p>org.webosinternals.patches.screen-lock-standby-times-deluxe - 1.4.5-10 - Standby Times Deluxe</p>

<p>org.webosinternals.patches.sounds-and-alerts-really-silent-ringer-switch-mute - 1.4.5-28 - Really Silent Ringer Switch Mute</p>

<p>org.webosinternals.patches.top-bar-gps-icon-on-top-bar - 1.4.5-1 - GPS Icon On Top Bar</p>

<p>org.webosinternals.patches.top-bar-ringer-switch-icon - 1.4.5-112 - Ringer Switch Icon</p>

<p>org.webosinternals.patches.top-bar-rotated-270deg-battery-icon-and-percent - 1.4.5-133 - Rotated 270deg Battery Icon And Percent</p>

<p>org.webosinternals.patches.top-bar-system-menu-initial-framework - 1.4.5-33 - System Menu Initial Framework</p>

<p>org.webosinternals.patches.top-bar-system-menu-mods-v1 - 1.4.5-33 - System Menu Mods v1</p>

<p>org.webosinternals.patches.top-bar-system-menu-today-menu - 1.4.5-33 - System Menu Today Menu</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[palm pre上的推荐补丁列表]]></title>
			<link>http://blog.nwy.me/blog/2011/06/08/palm-pre-patch-on-the-list-of-recommended/</link>
			<pubDate>2011-06-08T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/06/08/palm-pre-patch-on-the-list-of-recommended</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>作者：http://topic.csdn.net/u/20110517/12/0ab11541-6206-40c9-a8b1-5439d642ab49.html
注释：http://www.cnblogs.com/zhuqil/archive/2011/05/19/2051373.html</p>

<p>今天在csdn上看了一篇帖子：《这段代码描述我最近的心情》。 才发现原来用代码可以书写人生，对代码的作者十分钦佩。</p>

<p><code></p>

<pre><code> //一个程序员的爱情故事
public class MyLoveStory
{
    public static void Main(string[] args)
    {
        //The ForeStory
        int result = 1;
        bool love = false;//以前有个小男孩，没有爱情，孤孤单单一个人。
        if (love)   //他认为如果是爱情。
            result = AtOneTime();//那必须是两个人在同一个时间爱上彼此。
        //But Now...&lt;/div&gt;
</code></pre>

<div>            //但是现在长大了，有了爱情，却出现了第三者

            if (args[0] == &#8220;Has&#8221; && args[1] == &#8220;Third&#8221; && args[2] == &#8220;One&#8221;)            {
              love = false;//爱情没了
                result = DoPart();//分手，独自一个人。
                //现在这个男孩的心情是：如果女生生活的很悲惨，自己会伤心。
                //如果看到女生活的很幸福，自己更伤心，因为幸福不是自己给的。
                Console.WriteLine(GetNowHeartState.ToString());
            }
        }
        //男生的心情
        internal enum HeartState
        {
            Sad,
            MoreSad
        }
        //女生的生活状态
        internal enum LifeState
        {
            Nice,
            Poor,
        }
        //男生现在的心情
        internal HeartState GetNowHeartState(LifeState girlLife)
        {
            //现在这个小男孩的心情是：如果生活的很悲惨，自己会伤心。
            //如果看到女生活的很幸福，自己更伤心，因为幸福不是自己给的。
            if (gilrLife == LifeState.Poor)
                return HeartState.Sad;
            else
                return HeartState.MoreSad;
        }
        //爱情是在同一时间爱上彼此
        internal static int AtOneTime()
        {
            //1+1=2
            return 1 + 1;
        }
        //分手
        internal static int DoPart()
        {
            // 2-1=1
            return 2 - 1;
        }
    }
<code>


				Included file 'post/copyright.html' not found in _includes directory
				]]>
			</description>
			<title><![CDATA[一个程序员的爱情故事]]></title>
			<link>http://blog.nwy.me/blog/2011/06/01/the-love-story-of-a-programmer/</link>
			<pubDate>2011-06-01T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/06/01/the-love-story-of-a-programmer</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<pre>
<div align="center">
墙

作者：舒婷 

我无法反抗墙，

只有反抗的愿望。


我是什么？

它是什么？很可能

它是我的渐渐老化的皮肤，

既感觉不到雨寒的风霜，

也接受不了米兰的芬芳。

还有可能

我只是株车前草，

装饰性地寄生在它的泥缝里，

我偶然，它必然。


夜晚，墙活动起来，

伸出柔软的伪足，

挤压我，勒索我，

要我适应各种各样的形状。

我惊恐地逃到大街上，

发现相同的噩梦，

挂在每一个人的脚跟后。

一道道畏缩的目光

一堵堵冰冷的墙。


呵，我明白了，

我首先必须反抗的是：

我对墙的妥协，

和对这个世界的不安全感。

</div>
</pre>


<p>六一儿童节的前一天下午，我的博客不能访问了，ping域名提示解析错误，开了代理后可以访问，用justping显示在国内不能ping通，结论是博客被墙了，那简直是一定的。这让我这个超龄儿童过六一的心情都没有了。推测博客被墙的可能原因是之前写过一片关于ssh转发的文章，有幸被研究对抗墙的网友Other过去，当时为了避免出现敏感词导致博客被墙，还关闭了来自网友博客的引用通知，很显然即使这样做也没有逃脱墙的魔爪。</p>

<p>什么叫做体制（institutionalized）？《肖申克的救赎》中的安迪说：“这种东西，起初，你讨厌它，然后你逐渐地习惯它，足够的时间后你开始依赖它。这就是体制。”
画外音：博主，你不是说博客被墙了，为什么我还能访问？呃，博主对域名做了CDN。</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[写在博客被墙之后]]></title>
			<link>http://blog.nwy.me/blog/2011/06/01/after-the-blog-was-written-in-the-wall/</link>
			<pubDate>2011-06-01T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/06/01/after-the-blog-was-written-in-the-wall</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>转载出处：<a href="http://eishn.blog.163.com/blog/static/652318201102831731444/">http://eishn.blog.163.com/blog/static/652318201102831731444/</a> 作者：沈崴</p>

<p>境界零：混沌态、浆糊状（小白、新兵）</p>

<p><img src="http://nwy.me/wp-content/uploads/2011/05/img200810141202482_s.jpg" alt="" /></p>

<p>刚刚毕业、初出茅庐，有丰富把妹经验，无任何项目经验。</p>

<p>典型台词：“哇塞，薯熟你居然能写出这样这样酷的程序啊”。</p>

<p>此时身为薯熟的你切不可信以为真，因为任何简单的程序对他们来说 ……</p>

<pre><code>             其实都是写不出来的。
</code></pre>

<p>技能：hello world!</p>

<p>经验：0 年</p>

<p>角色：新手村游荡者（虽然 ID 很酷，但改变不了时常被怪虐的事实）</p>

<!--more-->


<p>境界一：CODE SMELL（IT 民工）</p>

<p>对于一些不太残忍的需求，竟已经能够完成了！了不起。</p>

<p>技能：面向对象、无脑肉搏</p>

<p>经验：1 年</p>

<p>角色：肉盾、坦克、血牛</p>

<p>公司终于可以放心地把一些 “没那么关键” 的项目扔给他了。</p>

<p>但遗憾的是，公司绝大部分的编码工作其实都 “没那么关键”。 这很容易理解，因为 “管理层“ 是不写代码的，高手则忙着折腾那几行关键代码。</p>

<pre><code>             兄弟！剩下的就全靠你啦。
</code></pre>

<p>在这个配合良好的团队中，身处一线承担 90% 的炮火，此时他们最需要的技能是 “吸引攻击” ……</p>

<p>“你每天编几个小时程序？能不能承受得起？”</p>

<p>“每天 77 小时，承受得起。”</p>

<pre><code>             —— 大家都露出了 YD 的笑容。
</code></pre>

<p>典型台词：“面向过程什么的最讨厌了”。</p>

<p>其他常用语：“瀑布模型什么的最讨厌了”。</p>

<p>高手很快从他们这些代码中闻到了坏味道，至于是 “不够面向” 或者 “不够工程” 导致的， 还是他们根本就没空清理代码，这是一个迷。</p>

<p><img src="http://nwy.me/wp-content/uploads/2011/05/T1B4lEXXVtXXblE7.V_021449.jpg_310x310.jpg" alt="" /></p>

<p>当然说句公道话，我们知道程序上线后能死撑多久，是和味道无关的。</p>

<p>赶时间随便凑起来的代码基本是稳定的，被自己恶心到于是下决心认真经营的那些代码一般会随机崩溃。</p>

<pre><code>             显然这只和人品相关。
</code></pre>

<p>境界二：SUCKS（TEAM LEADER、架构师、高手）</p>

<p>对于一些不太残忍的需求，竟已经能够华丽丽地完成了！了不起。</p>

<p>对仍在 “新手村论坛” 上转悠的那些童鞋们，你简直就是神一样的存在。 别犹豫了，不是新手的坏家伙毕竟是少数，你的确就是神一样的存在。</p>

<p>“虽然我那几千行没有一行是实际做事情的，但是，架构很重要” 你说道，“你懂的”。</p>

<p>次日 ……</p>

<p>“虽然我那几千行是面向复用和好味道设计的，但是，重构很重要” 你说道，“所以我重写了”。</p>

<p>技能：设计模式、软件工程、ppt</p>

<p>经验：2 年</p>

<p>角色：TEAM LEADER</p>

<p>典型台词：“我们的目标是，木有一行重复代码”。</p>

<p>正如预想的那样，很不幸，战斗顺利演变为缠绵悱侧的恶斗。 大伙抬起头遥望天边如血的残阳，麻的，又要甲板。</p>

<p>是的，项目延期，再次地。</p>

<p>大家已经数不清曾经已经延期了多少项目。 但好像，项目保质保量按时完成的情况，就如同新闻联播中的传说，似乎从来没有出现过。</p>

<p>似乎 LEADER 再次给出了乐观得不行的预期，虽然工期是三个月，但是我们都知道没有三年是搞不掂这事的 —— 但更迫在眉睫的是公司会在三年内上市（虽然公司今年夏天才开张）。</p>

<p>如果不够乐观，这种不给力的感觉，届时老板会毫不犹豫地把这个部门裁掉，然后找一堆更便宜，并且更加乐观得不行的家伙把你们替换掉。</p>

<p>要知道网上无所不能，并且对现实工资非常不满的程序员遍地都是。面对这个残酷的现实，你必须乐观起来才行！</p>

<p>……</p>

<p>经过数年的延期，终于赶在公司上市前把项目搞定了，谢天谢地。 在万分危急的最后一刻，LEADER 再次 “重构” 了整个系统，团队终于逃出生天。</p>

<p>然而在一个阴暗的角落，是主程冷峻的目光，注视着高手们的代码。</p>

<p><img src="http://nwy.me/wp-content/uploads/2011/05/4396016v0_350x350_Back.jpg" alt="" /></p>

<p>“SUCKS！” 从他的牙缝中迸出几个字，轻蔑在他的嘴角蔓延。</p>

<p>境界三：MAGIC（主程）</p>

<p>技能：精通各种 MAGIC 和 HACK</p>

<p>经验：3 年</p>

<p>角色：法师</p>

<p>典型台词：“IE 的这个 BUG 只要用 IE 另外的一个 BUG 就可以解决了”。</p>

<p>你曾经不小心看到了主程的源码，这个文件充斥着大量注释为（也是唯一的一种注释）“HACK” 的代码，剩下的则全都是 MAGIC。 从此你就很后悔因为好奇打开了这个文件。</p>

<p>后来主程去了纳尼亚，你的朋友小明就奉命继续维护他的代码，这从一开始就是一个错误，其中一个 BUG 花了他将近两年的时间 —— 仍然没有搞定。 所以后来小明也去了纳尼亚。</p>

<p>幸运的是你接手了小明的工作，你试图说服公司，与其在主程的程序里调试，重新实现一遍要快得多。</p>

<p>公司冷酷的答复是，不行。这是公司宝贵的精神财富，是照耀所有员工不断前进的动力。 况且这些代码还 HARDCODE 了各种 8086 指令，来加速最新的 ARM，这让我们的竞争对手不寒而栗。</p>

<p><img src="http://nwy.me/wp-content/uploads/2011/05/zrtn_001n49526640_tn.jpg" alt="" /></p>

<p>心灰意冷的你于是决定看破红尘，但是无名禅师的一番话让你幡然醒悟。于是你回到公司按主程的程序原样抄写了一遍</p>

<pre><code>             —— BUG 消失了。
</code></pre>

<p>境界四：迷</p>

<p>技能：UNKNOW</p>

<p>经验：UNKNOW</p>

<p>角色：UNKNOW</p>

<p>传说在每一个挨踢公司里都有一个扫地大妈，会在某天经过你的身边，扫一眼代码淡淡地说 “小心，栈溢出了”……</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[程序员的 100 种境界]]></title>
			<link>http://blog.nwy.me/blog/2011/05/31/realm-of-the-programmer-100-species/</link>
			<pubDate>2011-05-31T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/05/31/realm-of-the-programmer-100-species</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>前几天看到论坛网友讨论联想官方放出T61新的BIOS，看了更新说明:，由于没有做多大的变动，就没有更新。今天看到有国外网友发布了基于这次更新BIOS的版本，做了以下修改：</p>

<ol>
<li>SATA-II 3Gb/s</li>
<li>SLIC2.1</li>
<li>whitelist removed</li>
<li>Dual-IDA support</li>
</ol>


<p>这次升级BIOS的主要原因是：破解了联想的SATA限制，SATA从1.5Gb/s上升到3Gb/s，硬盘读写速度可以从130MB/s达到260MB/s。本次升级是刻盘刷的BIOS，整个过程有惊无险。</p>

<p>虽然之前在Windows XP和Windows PE下刷过BIOS，不过随着年龄的增长，做事有些畏首畏尾了，觉得没必要为了节省一张刻录光盘冒风险，反正手头有一桶莱德的DVD-RW盘。整个过程有些惊险，进入BIOS关闭power on password的时候才发现自己忘记了power on password，平时用的是指纹和super password，于是拆机CMOS放电，中间不小心还把主板上CMOS电池的插座一起拔下来了，好在没有拔断针脚，又小心的插回去了。清除了power on password后，开机放入光盘后，从光盘启动，报错，提示flash over lan没有开启，又重启进BIOS设置，之后等待检测正常后开始升级BIOS，30s左右，伴随长鸣升级完成，笔记本重新启动，正常进入系统。</p>

<p>测试了一下硬盘的读取速度，附图</p>

<p><img src="http://nwy.me/img/2011/05/Screenshot-500-GB-%E7%A1%AC%E7%9B%98-ATA-Hitachi-HTS725050A9A364-%E2%80%93-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.png" alt="Screenshot-500 GB 硬盘 (ATA Hitachi HTS725050A9A364) – 性能测试" />
附下载链接:
<a href="http://forum.notebookreview.com/lenovo-ibm/459591-t61-x61-sata-ii-1-5-gb-s-cap-willing-pay-solution-8.html">http://forum.notebookreview.com/lenovo-ibm/459591-t61-x61-sata-ii-1-5-gb-s-cap-willing-pay-solution-8.html</a></p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[升级笔记本BIOS]]></title>
			<link>http://blog.nwy.me/blog/2011/05/16/notebook-bios-upgrade/</link>
			<pubDate>2011-05-16T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/05/16/notebook-bios-upgrade</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
		<item>
			<description>
				<![CDATA[
				<p>已知本博客存在的问题</p>

<ul>
<li>一、 谷歌爬虫抓取错误。</li>
<li>二、 wordpress文件存放路径不合理。</li>
<li>三、 尚未通过w3c验证。</li>
<li>四、 文章链接格式混乱。</li>
<li>五、 数据库是否冗余没有做过检查。</li>
</ul>


<p>问题一：已修复，通过查看谷歌网站管理工具里的记录，发现是之前迁移博客更换域名后为了不降低谷歌收录做301重定向的时候，未针对url访问做判断，旧的博客路径里包含archives/，迁移到新博客后改变了博客的url格式，造成从旧博客301重定向的访问也带有archives/，于是出现404错误。
解决方法：仍然是使用重定向的方法在archives/目录下新建.htaccess文件把访问重定向到首页，代码如下：</p>

<p><code>Redirect /archives http://nwy.me</code></p>

<p>问题二：尚未修复，目前的wordpress文件扔在网站空间的根目录下，维护的时候很混乱不说，还存在安全问题。暂时不敢贸然对整个博客做重定向，如果被谷歌认为是重复内容做出惩罚就杯具了。要提一下的是估计许多网友会和我一样安装wordpress后不会删除readme.html文件，这样一来别人就可以通过访问这个文件知道wordpress的版本号，通过版本号可以判断时候有无漏洞可以利用。总之建议安装完wordpress后删除空间里的readme.html文件.</p>

<p>问题三：这也是是博客已知问题里的重点，通过w3c验证发现博客有22 Errors, 2 warning(s) ，看来这个问题不能再拖了。</p>

<p>问题四：博客为了提高网站收录做了页面静态化，静态化用过多个url格式，导致新旧日志url风格不统一，目前的url格式是通过插件实现url中包含用谷歌自动翻译过的日志标题，看资料，谷歌可以收录中文url，理论上url中包含关键字，有利于seo优化，但是有中文的原因，就必须要对url做编码，从后台的访问日志来看会出现莫名其妙的缺失字符问题。</p>

<p>问题五：迁移博客导入备份数据库后未做过优化，数据库存在许多无用的字段，这个需要花时间确认无误后再删除。</p>

				Included file &#8216;post/copyright.html&#8217; not found in _includes directory
				]]>
			</description>
			<title><![CDATA[博客待完善事宜]]></title>
			<link>http://blog.nwy.me/blog/2011/05/04/blog-matters-to-be-improved/</link>
			<pubDate>2011-05-04T00:00:00+08:00</pubDate>
			<guid isPermaLink="false">http://blog.nwy.me/blog/2011/05/04/blog-matters-to-be-improved</guid>
 
			<source url="http://blog.nwy.me/rss.xml"><![CDATA[Ocean's Blog]]></source>
		</item>
		
	</channel>
</rss>
